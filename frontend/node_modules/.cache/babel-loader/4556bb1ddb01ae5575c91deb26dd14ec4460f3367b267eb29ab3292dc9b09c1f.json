{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akash.mathur\\\\OneDrive - CGI\\\\Desktop\\\\Akash\\\\Study\\\\GenAI\\\\BlueGen\\\\backend\\\\bluegen-app\\\\src\\\\components\\\\ChatInterface.jsx\",\n  _s = $RefreshSig$();\n// src/components/ChatInterface.jsx\nimport React, { useState } from \"react\";\nimport logo from \"../assets/logo.jpg\";\nimport \"./MainApp.css\"; // Ensures theme and layout styling is consistent across the app\nimport \"./ChatInterface.css\"; // Specific styling for the chat UI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = ({\n  sessionId\n}) => {\n  _s();\n  const [userInput, setUserInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const handleSend = async () => {\n    if (!userInput.trim()) return;\n    const userMessage = {\n      sender: \"user\",\n      text: userInput\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setUserInput(\"\");\n    setLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:8000/query\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          session_id: sessionId,\n          query: userInput\n        })\n      });\n      const data = await response.json();\n      const botMessage = {\n        sender: \"bot\",\n        text: data.answer || \"No answer received.\"\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error(\"Query failed:\", error);\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: \"Something went wrong. Please try again.\"\n      }]);\n    }\n    setLoading(false);\n  };\n  const handleKeyDown = e => {\n    if (e.key === \"Enter\") {\n      handleSend();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-history\",\n      children: [messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.sender}`,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"bot\",\n        children: \"\\uD83E\\uDD16 Thinking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        onKeyDown: handleKeyDown,\n        placeholder: \"Ask me something...\",\n        className: \"chat-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"gzUAoRhQ0C3CVvSp2FhA8vqaPJM=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","logo","jsxDEV","_jsxDEV","ChatInterface","sessionId","_s","userInput","setUserInput","messages","setMessages","loading","setLoading","handleSend","trim","userMessage","sender","text","prev","response","fetch","method","headers","body","JSON","stringify","session_id","query","data","json","botMessage","answer","error","console","handleKeyDown","e","key","className","children","map","msg","idx","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","onKeyDown","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/akash.mathur/OneDrive - CGI/Desktop/Akash/Study/GenAI/BlueGen/backend/bluegen-app/src/components/ChatInterface.jsx"],"sourcesContent":["// src/components/ChatInterface.jsx\r\nimport React, { useState } from \"react\";\r\nimport logo from \"../assets/logo.jpg\";\r\nimport \"./MainApp.css\"; // Ensures theme and layout styling is consistent across the app\r\nimport \"./ChatInterface.css\"; // Specific styling for the chat UI\r\n\r\nconst ChatInterface = ({ sessionId }) => {\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleSend = async () => {\r\n    if (!userInput.trim()) return;\r\n\r\n    const userMessage = { sender: \"user\", text: userInput };\r\n    setMessages((prev) => [...prev, userMessage]);\r\n    setUserInput(\"\");\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/query\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          session_id: sessionId,\r\n          query: userInput,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      const botMessage = { sender: \"bot\", text: data.answer || \"No answer received.\" };\r\n      setMessages((prev) => [...prev, botMessage]);\r\n    } catch (error) {\r\n      console.error(\"Query failed:\", error);\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { sender: \"bot\", text: \"Something went wrong. Please try again.\" },\r\n      ]);\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-box\">\r\n      <div className=\"chat-history\">\r\n        {messages.map((msg, idx) => (\r\n          <div key={idx} className={`chat-message ${msg.sender}`}>\r\n            <p>{msg.text}</p>\r\n          </div>\r\n        ))}\r\n        {loading && <p className=\"bot\">ðŸ¤– Thinking...</p>}\r\n      </div>\r\n      <div className=\"chat-input-area\">\r\n        <input\r\n          type=\"text\"\r\n          value={userInput}\r\n          onChange={(e) => setUserInput(e.target.value)}\r\n          onKeyDown={handleKeyDown}\r\n          placeholder=\"Ask me something...\"\r\n          className=\"chat-input\"\r\n        />\r\n        <button onClick={handleSend} className=\"send-button\">\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}