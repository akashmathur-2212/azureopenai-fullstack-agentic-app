{"ast":null,"code":"export function intelligentFormatToHTML(text) {\n  const lines = text.trim().split('\\n');\n  let html = '';\n  let inList = false;\n  for (let line of lines) {\n    const trimmed = line.trim();\n    const sectionMatch = trimmed.match(/^([A-Z][A-Za-z ]+):$/);\n    if (sectionMatch) {\n      if (inList) {\n        html += '</ul>';\n        inList = false;\n      }\n      html += `<h2>${sectionMatch[1]}</h2>`;\n      continue;\n    }\n    if (/^\\d+\\.\\s+/.test(trimmed)) {\n      if (!inList) {\n        html += '<ol>';\n        inList = true;\n      }\n      html += `<li>${trimmed.replace(/^\\d+\\.\\s+/, '')}</li>`;\n      continue;\n    }\n    if (/^- /.test(trimmed)) {\n      if (!inList) {\n        html += '<ul>';\n        inList = true;\n      }\n      html += `<li>${trimmed.replace(/^- /, '')}</li>`;\n      continue;\n    }\n    if (trimmed === '') {\n      if (inList) {\n        html += '</ul>';\n        inList = false;\n      }\n      html += '<br />';\n      continue;\n    }\n    if (inList) {\n      html += '</ul>';\n      inList = false;\n    }\n    debugger;\n    if (trimmed.startsWith(\"### \")) {\n      html += `<h1 style=\"font-weight:600;\">${trimmed.replace('### ', '')}</h1>`;\n    } else if (trimmed.startsWith(\"#### \")) {\n      html += `<h2>${trimmed.replace('#### ', '')}</h2>`;\n    } else {\n      //console.log(${ trimmed })\n      html += `<p>${trimmed}</p>`;\n    }\n  }\n  if (inList) html += '</ul>';\n  return html;\n}","map":{"version":3,"names":["intelligentFormatToHTML","text","lines","trim","split","html","inList","line","trimmed","sectionMatch","match","test","replace","startsWith"],"sources":["C:/Users/akash.mathur/OneDrive - CGI/Desktop/Akash/Study/GenAI/BlueGen/backend/bluegen-app/src/utils/formatter.js"],"sourcesContent":["export function intelligentFormatToHTML(text) {\r\n    const lines = text.trim().split('\\n');\r\n    let html = '';\r\n    let inList = false;\r\n\r\n    for (let line of lines) {\r\n        const trimmed = line.trim();\r\n\r\n        const sectionMatch = trimmed.match(/^([A-Z][A-Za-z ]+):$/);\r\n        if (sectionMatch) {\r\n            if (inList) {\r\n                html += '</ul>';\r\n                inList = false;\r\n            }\r\n            html += `<h2>${sectionMatch[1]}</h2>`;\r\n            continue;\r\n        }\r\n\r\n        if (/^\\d+\\.\\s+/.test(trimmed)) {\r\n            if (!inList) {\r\n                html += '<ol>';\r\n                inList = true;\r\n            }\r\n            html += `<li>${trimmed.replace(/^\\d+\\.\\s+/, '')}</li>`;\r\n            continue;\r\n        }\r\n\r\n        if (/^- /.test(trimmed)) {\r\n            if (!inList) {\r\n                html += '<ul>';\r\n                inList = true;\r\n            }\r\n            html += `<li>${trimmed.replace(/^- /, '')}</li>`;\r\n            continue;\r\n        }\r\n\r\n        if (trimmed === '') {\r\n            if (inList) {\r\n                html += '</ul>';\r\n                inList = false;\r\n            }\r\n            html += '<br />';\r\n            continue;\r\n        }\r\n\r\n        if (inList) {\r\n            html += '</ul>';\r\n            inList = false;\r\n        }\r\n        debugger;\r\n        if (trimmed.startsWith(\"### \")) {\r\n            html += `<h1 style=\"font-weight:600;\">${trimmed.replace('### ', '')}</h1>`;\r\n        } else if (trimmed.startsWith(\"#### \")) {\r\n            html += `<h2>${trimmed.replace('#### ', '')}</h2>`;\r\n        } else {\r\n            //console.log(${ trimmed })\r\n            html += `<p>${trimmed}</p>`;\r\n        }\r\n    }\r\n\r\n    if (inList) html += '</ul>';\r\n    return html;\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,uBAAuBA,CAACC,IAAI,EAAE;EAC1C,MAAMC,KAAK,GAAGD,IAAI,CAACE,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC;EACrC,IAAIC,IAAI,GAAG,EAAE;EACb,IAAIC,MAAM,GAAG,KAAK;EAElB,KAAK,IAAIC,IAAI,IAAIL,KAAK,EAAE;IACpB,MAAMM,OAAO,GAAGD,IAAI,CAACJ,IAAI,CAAC,CAAC;IAE3B,MAAMM,YAAY,GAAGD,OAAO,CAACE,KAAK,CAAC,sBAAsB,CAAC;IAC1D,IAAID,YAAY,EAAE;MACd,IAAIH,MAAM,EAAE;QACRD,IAAI,IAAI,OAAO;QACfC,MAAM,GAAG,KAAK;MAClB;MACAD,IAAI,IAAI,OAAOI,YAAY,CAAC,CAAC,CAAC,OAAO;MACrC;IACJ;IAEA,IAAI,WAAW,CAACE,IAAI,CAACH,OAAO,CAAC,EAAE;MAC3B,IAAI,CAACF,MAAM,EAAE;QACTD,IAAI,IAAI,MAAM;QACdC,MAAM,GAAG,IAAI;MACjB;MACAD,IAAI,IAAI,OAAOG,OAAO,CAACI,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,OAAO;MACtD;IACJ;IAEA,IAAI,KAAK,CAACD,IAAI,CAACH,OAAO,CAAC,EAAE;MACrB,IAAI,CAACF,MAAM,EAAE;QACTD,IAAI,IAAI,MAAM;QACdC,MAAM,GAAG,IAAI;MACjB;MACAD,IAAI,IAAI,OAAOG,OAAO,CAACI,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO;MAChD;IACJ;IAEA,IAAIJ,OAAO,KAAK,EAAE,EAAE;MAChB,IAAIF,MAAM,EAAE;QACRD,IAAI,IAAI,OAAO;QACfC,MAAM,GAAG,KAAK;MAClB;MACAD,IAAI,IAAI,QAAQ;MAChB;IACJ;IAEA,IAAIC,MAAM,EAAE;MACRD,IAAI,IAAI,OAAO;MACfC,MAAM,GAAG,KAAK;IAClB;IACA;IACA,IAAIE,OAAO,CAACK,UAAU,CAAC,MAAM,CAAC,EAAE;MAC5BR,IAAI,IAAI,gCAAgCG,OAAO,CAACI,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,OAAO;IAC9E,CAAC,MAAM,IAAIJ,OAAO,CAACK,UAAU,CAAC,OAAO,CAAC,EAAE;MACpCR,IAAI,IAAI,OAAOG,OAAO,CAACI,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO;IACtD,CAAC,MAAM;MACH;MACAP,IAAI,IAAI,MAAMG,OAAO,MAAM;IAC/B;EACJ;EAEA,IAAIF,MAAM,EAAED,IAAI,IAAI,OAAO;EAC3B,OAAOA,IAAI;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}